%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.5 (Build 17F77) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 8304 3190
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 8304 3190
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1848 0.2032 0.23999999 sc
q
3020.0471 1605.8527 m
3020.0471 1546.1042 2997.7466 1506.8654 2954.9265 1488.1497 c
3016.4856 1254.5095 l
3019.1567 1243.7891 3013.8147 1238.4635 3003.9929 1238.4635 c
2911.2021 1238.4635 l
2902.2849 1238.4635 2897.833 1242.9131 2896.0386 1250.95 c
2836.26 1477.443 l
2774.7009 1477.443 l
2774.7009 1252.7158 l
2774.7009 1243.7891 2769.3589 1238.4635 2760.4275 1238.4635 c
2667.6367 1238.4635 l
2658.7192 1238.4635 2653.3633 1243.8169 2653.3633 1252.7158 c
2653.3633 1937.5901 l
2653.3633 1946.5031 2658.7192 1951.8563 2667.6367 1951.8563 c
2891.5728 1951.8563 l
2975.4324 1951.8563 3020.0471 1907.264 3020.0471 1823.4468 c
3020.0471 1605.8527 l
h
2863.0261 1595.1599 m
2886.2168 1595.1599 2898.7095 1607.6464 2898.7095 1630.8254 c
2898.7095 1798.474 l
2898.7095 1821.6531 2886.2168 1834.1255 2863.0261 1834.1255 c
2774.7009 1834.1255 l
2774.7009 1595.146 l
2863.0261 1595.1599 l
h
W
0 0 8304 3190 rc
2643.3633 1961.8563 m
3030.0471 1961.8563 l
3030.0471 1228.4635 l
2643.3633 1228.4635 l
h
f
Q
q
3091.3723 1823.4468 m
3091.3723 1907.264 3135.9729 1951.8563 3219.8464 1951.8563 c
3319.7739 1951.8563 l
3403.6335 1951.8563 3448.2483 1907.264 3448.2483 1823.4468 c
3448.2483 1366.8732 l
3448.2483 1283.0697 3403.6335 1238.4774 3319.7739 1238.4774 c
3219.8464 1238.4774 l
3135.9729 1238.4774 3091.3723 1283.0697 3091.3723 1366.8732 c
3091.3723 1823.4468 l
h
3297.4597 1353.5107 m
3320.6504 1353.5107 3333.1431 1365.1073 3333.1431 1389.1763 c
3333.1431 1801.1437 l
3333.1431 1824.3228 3320.6504 1836.8091 3297.4597 1836.8091 c
3245.7222 1836.8091 l
3222.5315 1836.8091 3210.0388 1824.3228 3210.0388 1801.1437 c
3210.0388 1389.1624 l
3210.0388 1365.1073 3222.5315 1353.5107 3245.7222 1353.5107 c
3297.4597 1353.5107 l
h
W
0 0 8304 3190 rc
3081.3723 1961.8563 m
3458.2483 1961.8563 l
3458.2483 1228.4774 l
3081.3723 1228.4774 l
h
f
Q
q
3895.1743 1727.1431 m
3895.1743 1718.2162 3889.8184 1712.8768 3880.915 1712.8768 c
3791.6995 1712.8768 l
3781.8779 1712.8768 3777.426 1718.2162 3777.426 1727.1431 c
3777.426 1798.474 l
3777.426 1821.6531 3764.9473 1834.1255 3741.7566 1834.1255 c
3695.3611 1834.1255 l
3671.28 1834.1255 3659.6777 1821.6531 3659.6777 1798.474 c
3659.6777 1391.8181 l
3659.6777 1367.7491 3672.1565 1356.1804 3695.3611 1356.1804 c
3741.7566 1356.1804 l
3764.9473 1356.1804 3777.426 1367.7631 3777.426 1391.8181 c
3777.426 1463.1769 l
3777.426 1472.1036 3781.8779 1477.443 3791.6995 1477.443 c
3880.915 1477.443 l
3889.8601 1477.443 3895.1743 1472.1036 3895.1743 1463.1769 c
3895.1743 1366.8593 l
3895.1743 1283.0558 3849.6694 1238.4635 3766.7141 1238.4635 c
3666.7866 1238.4635 l
3582.927 1238.4635 3537.4219 1283.0558 3537.4219 1366.8593 c
3537.4219 1823.4468 l
3537.4219 1907.264 3582.927 1951.8563 3666.7866 1951.8563 c
3766.7141 1951.8563 l
3849.6833 1951.8563 3895.1743 1907.264 3895.1743 1823.4468 c
3895.1743 1727.1431 l
h
W
0 0 8304 3190 rc
3527.4219 1961.8563 m
3905.1743 1961.8563 l
3905.1743 1228.4635 l
3527.4219 1228.4635 l
h
f
Q
q
4271.624 1238.4635 m
4260.8984 1238.4635 4254.6797 1242.9131 4251.0903 1251.8259 c
4138.6982 1516.682 l
4105.6719 1453.3601 l
4105.6719 1256.3032 l
4105.6719 1244.7068 4099.4395 1238.4635 4087.8372 1238.4635 c
4002.1829 1238.4635 l
3990.5806 1238.4635 3984.3342 1244.7068 3984.3342 1256.3032 c
3984.3342 1934.0166 l
3984.3342 1945.5992 3990.5806 1951.8563 4002.1829 1951.8563 c
4087.8372 1951.8563 l
4099.4258 1951.8563 4105.6719 1945.6132 4105.6719 1934.0166 c
4105.6719 1657.578 l
4243.0635 1938.4801 l
4247.5293 1947.3929 4253.7896 1951.8563 4263.5972 1951.8563 c
4357.2642 1951.8563 l
4370.6475 1951.8563 4376.0034 1942.9296 4369.7432 1930.457 c
4218.0923 1619.2428 l
4379.5508 1258.9729 l
4385.7974 1247.3765 4380.4414 1238.4635 4366.1816 1238.4635 c
4271.624 1238.4635 l
h
W
0 0 8304 3190 rc
3974.3342 1961.8563 m
4392.1284 1961.8563 l
4392.1284 1228.4635 l
3974.3342 1228.4635 l
h
f
Q
q
4800.6572 1848.4056 m
4800.6572 1839.4927 4797.0815 1833.2495 4786.3838 1833.2495 c
4563.3379 1833.2495 l
4563.3379 1654.9083 l
4733.7417 1654.9083 l
4742.687 1654.9083 4748.0151 1649.5551 4748.0151 1639.7522 c
4748.0151 1551.4714 l
4748.0151 1541.6548 4742.6592 1536.3015 4733.7417 1536.3015 c
4563.3379 1536.3015 l
4563.3379 1356.1804 l
4786.3838 1356.1804 l
4797.1094 1356.1804 4800.6572 1351.717 4800.6572 1341.9143 c
4800.6572 1252.7297 l
4800.6572 1243.8169 4797.0815 1238.4913 4786.3838 1238.4913 c
4458.0684 1238.4913 l
4450.0273 1238.4913 4444.6714 1243.8446 4444.6714 1252.7297 c
4444.6714 1937.5901 l
4444.6714 1946.5031 4450.0273 1951.8563 4458.0684 1951.8563 c
4786.3838 1951.8563 l
4797.1094 1951.8563 4800.6572 1946.5031 4800.6572 1937.5901 c
4800.6572 1848.4056 l
h
W
0 0 8304 3190 rc
4434.6714 1961.8563 m
4810.6572 1961.8563 l
4810.6572 1228.4913 l
4434.6714 1228.4913 l
h
f
Q
q
5214.585 1951.8563 m
5224.3926 1951.8563 5228.8584 1946.5031 5228.8584 1937.5901 c
5228.8584 1848.4056 l
5228.8584 1839.4927 5224.3926 1834.1394 5214.585 1834.1394 c
5111.0957 1834.1394 l
5111.0957 1252.7297 l
5111.0957 1242.927 5106.644 1238.4913 5096.8364 1238.4913 c
5004.0454 1238.4913 l
4995.1006 1238.4913 4989.7725 1242.927 4989.7725 1252.7297 c
4989.7725 1834.1394 l
4886.2974 1834.1394 l
4877.3521 1834.1394 4872.0239 1839.4927 4872.0239 1848.4056 c
4872.0239 1937.5901 l
4872.0239 1946.5031 4877.3799 1951.8563 4886.2974 1951.8563 c
5214.585 1951.8563 l
h
W
0 0 8304 3190 rc
4862.0239 1961.8563 m
5238.8584 1961.8563 l
5238.8584 1228.4913 l
4862.0239 1228.4913 l
h
f
Q
q
5220 1338.1742 m
5220 1349.7708 5226.2466 1356 5237.8486 1356 c
5319.0371 1356 l
5330.6396 1356 5336.8721 1349.7708 5336.8721 1338.1742 c
5336.8721 1256.1506 l
5336.8721 1244.5402 5330.6396 1238.3109 5319.0371 1238.3109 c
5237.8486 1238.3109 l
5226.2466 1238.3109 5220 1244.5402 5220 1256.1506 c
5220 1338.1742 l
h
W
0 0 8304 3190 rc
5210 1366 m
5346.8721 1366 l
5346.8721 1228.3109 l
5210 1228.3109 l
h
f
Q
q
5783.7109 1727.1431 m
5783.7109 1718.2162 5778.3413 1712.8768 5769.438 1712.8768 c
5680.2222 1712.8768 l
5670.4146 1712.8768 5665.9629 1718.2162 5665.9629 1727.1431 c
5665.9629 1798.474 l
5665.9629 1821.6531 5653.4839 1834.1255 5630.2935 1834.1255 c
5583.8979 1834.1255 l
5559.8027 1834.1255 5548.2144 1821.6531 5548.2144 1798.474 c
5548.2144 1391.8181 l
5548.2144 1367.7491 5560.6934 1356.1804 5583.8979 1356.1804 c
5630.2935 1356.1804 l
5653.4839 1356.1804 5665.9629 1367.7631 5665.9629 1391.8181 c
5665.9629 1463.1769 l
5665.9629 1472.1036 5670.4146 1477.443 5680.2222 1477.443 c
5769.438 1477.443 l
5778.3828 1477.443 5783.7109 1472.1036 5783.7109 1463.1769 c
5783.7109 1366.8593 l
5783.7109 1283.0558 5738.2061 1238.4635 5655.2368 1238.4635 c
5555.3096 1238.4635 l
5471.4497 1238.4635 5425.9448 1283.0558 5425.9448 1366.8593 c
5425.9448 1823.4468 l
5425.9448 1907.264 5471.4497 1951.8563 5555.3096 1951.8563 c
5655.2368 1951.8563 l
5738.2202 1951.8563 5783.7109 1907.264 5783.7109 1823.4468 c
5783.7109 1727.1431 l
h
W
0 0 8304 3190 rc
5415.9448 1961.8563 m
5793.7109 1961.8563 l
5793.7109 1228.4635 l
5415.9448 1228.4635 l
h
f
Q
q
6108.4233 1937.5901 m
6108.4233 1946.5031 6113.7656 1951.8563 6122.6826 1951.8563 c
6214.5693 1951.8563 l
6225.2812 1951.8563 6229.7192 1946.5031 6229.7192 1937.5901 c
6229.7192 1252.7297 l
6229.7192 1243.8169 6225.2676 1238.4913 6214.5693 1238.4913 c
6122.6826 1238.4913 l
6113.7378 1238.4913 6108.4233 1243.8446 6108.4233 1252.7297 c
6108.4233 1536.3015 l
5994.2227 1536.3015 l
5994.2227 1252.7158 l
5994.2227 1243.7891 5988.8667 1238.4635 5979.9492 1238.4635 c
5888.0767 1238.4635 l
5877.3506 1238.4635 5872.8989 1243.8169 5872.8989 1252.7158 c
5872.8989 1937.5901 l
5872.8989 1946.5031 5877.3506 1951.8563 5888.0767 1951.8563 c
5979.9492 1951.8563 l
5988.8945 1951.8563 5994.2227 1946.5031 5994.2227 1937.5901 c
5994.2227 1654.0184 l
6108.4233 1654.0184 l
6108.4233 1937.5901 l
h
W
0 0 8304 3190 rc
5862.8989 1961.8563 m
6239.7192 1961.8563 l
6239.7192 1228.4635 l
5862.8989 1228.4635 l
h
f
Q
q
6636.5659 1238.4635 m
6628.5391 1238.4635 6624.0869 1242.9131 6622.2925 1250.95 c
6597.3213 1381.1254 l
6438.5054 1381.1254 l
6414.4385 1250.95 l
6412.6436 1242.9131 6408.1919 1238.4635 6400.165 1238.4635 c
6304.7168 1238.4635 l
6294.9092 1238.4635 6290.4438 1243.8169 6293.1006 1253.6196 c
6441.2046 1939.37 l
6442.999 1948.2828 6448.3408 1951.8563 6456.3682 1951.8563 c
6580.3906 1951.8563 l
6588.4175 1951.8563 6593.7734 1948.2828 6595.5542 1939.37 c
6743.6577 1253.6196 l
6745.4526 1243.8169 6741.8774 1238.4635 6731.1792 1238.4635 c
6636.5659 1238.4635 l
h
6517.8994 1795.8043 m
6460.8057 1484.5901 l
6575.0068 1484.5901 l
6517.8994 1795.8043 l
h
W
0 0 8304 3190 rc
6282.3452 1961.8563 m
6754.1001 1961.8563 l
6754.1001 1228.4635 l
6282.3452 1228.4635 l
h
f
Q
q
7077.2598 1951.8563 m
7087.0674 1951.8563 7091.5332 1946.5031 7091.5332 1937.5901 c
7091.5332 1848.4056 l
7091.5332 1839.4927 7087.0674 1834.1394 7077.2598 1834.1394 c
6973.7847 1834.1394 l
6973.7847 1252.7297 l
6973.7847 1242.927 6969.3188 1238.4913 6959.5112 1238.4913 c
6866.7207 1238.4913 l
6857.8032 1238.4913 6852.4609 1242.927 6852.4609 1252.7297 c
6852.4609 1834.1394 l
6748.9863 1834.1394 l
6740.0547 1834.1394 6734.7266 1839.4927 6734.7266 1848.4056 c
6734.7266 1937.5901 l
6734.7266 1946.5031 6740.0825 1951.8563 6748.9863 1951.8563 c
7077.2598 1951.8563 l
h
W
0 0 8304 3190 rc
6724.7266 1961.8563 m
7101.5332 1961.8563 l
7101.5332 1228.4913 l
6724.7266 1228.4913 l
h
f
Q
0.86000001 0.1376 0.1376 sc
q
2270.7026 1713.0197 m
2270.7185 1712.9952 l
2270.7158 1712.9993 2270.7131 1713.0034 2270.7104 1713.0074 c
2270.708 1713.0115 2270.7053 1713.0156 2270.7026 1713.0197 c
h
1574.4143 2081.0359 m
1611.6987 2060.3281 1646.9421 2034.1282 1677.0402 2005.0074 c
1725.5571 2013.7948 1775.5837 2018.226 1826.3351 2018.226 c
1978.2629 2018.226 2122.304 1978.3707 2231.8989 1906.0245 c
2288.6528 1868.5408 2333.7639 1824.0671 2365.9634 1773.8267 c
2401.8228 1717.8445 2420 1657.6434 2420 1593.136 c
2420 1530.3635 2401.8228 1470.1375 2365.9634 1414.1677 c
2333.7639 1363.9023 2288.6528 1319.4412 2231.8989 1281.9575 c
2122.304 1209.6113 1978.275 1169.781 1826.3351 1169.781 c
1775.5837 1169.781 1725.5692 1174.212 1677.0402 1182.9871 c
1646.9301 1153.8788 1611.6987 1127.6664 1574.4143 1106.9586 c
1375.2015 1007.1893 1210 1104.6119 1210 1104.6119 c
1210 1104.6119 1363.5946 1235.0123 1338.6176 1349.3234 c
1269.8943 1419.7598 1232.6581 1504.7129 1232.6581 1594.8461 c
1232.6581 1683.2816 1269.9064 1768.2347 1338.6176 1838.6836 c
1363.5905 1952.9631 1210.0509 2083.3394 1210 2083.3826 c
1210.0492 2083.4114 1375.2311 2180.8027 1574.4143 2081.0359 c
h
W
0 0 8304 3190 rc
1200 2136 m
2430 2136 l
2430 1052 l
1200 1052 l
h
f
Q
1 1 1 sc
q
1455.2615 1396.4764 m
1386.9834 1450.2838 1346 1519.139 1346 1594.1868 c
1346 1766.3965 1561.7987 1906 1828 1906 c
2094.2012 1906 2310 1766.3965 2310 1594.1868 c
2310 1421.9771 2094.2012 1282.3734 1828 1282.3734 c
1762.3922 1282.3734 1699.8461 1290.8533 1642.8374 1306.2111 c
1601.1586 1266.0151 l
1578.512 1244.1742 1551.9684 1224.4092 1524.3004 1208.8342 c
1487.627 1190.8242 1451.4126 1180.9982 1415.5834 1178 c
1417.6046 1181.6746 1419.4657 1185.3971 1421.4637 1189.0775 c
1463.2257 1266.0055 1474.4917 1335.1384 1455.2615 1396.4764 c
h
W*
0 0 8304 3190 rc
1336 1916 m
2320 1916 l
2320 1168 l
1336 1168 l
h
f
Q
0.86000001 0.1376 0.1376 sc
q
1596.8613 1520 m
1557.7257 1520 1526 1552.2355 1526 1592 c
1526 1631.7645 1557.7257 1664 1596.8613 1664 c
1635.9968 1664 1667.7225 1631.7645 1667.7225 1592 c
1667.7225 1552.2355 1635.9968 1520 1596.8613 1520 c
h
1825 1520 m
1785.8644 1520 1754.1387 1552.2355 1754.1387 1592 c
1754.1387 1631.7645 1785.8644 1664 1825 1664 c
1864.1356 1664 1895.8613 1631.7645 1895.8613 1592 c
1895.8613 1552.2355 1864.1356 1520 1825 1520 c
h
2053.1387 1520 m
2014.0032 1520 1982.2775 1552.2355 1982.2775 1592 c
1982.2775 1631.7645 2014.0032 1664 2053.1387 1664 c
2092.2744 1664 2124 1631.7645 2124 1592 c
2124 1552.2355 2092.2744 1520 2053.1387 1520 c
h
W
0 0 8304 3190 rc
1516 1674 m
2134 1674 l
2134 1510 l
1516 1510 l
h
f
ep
end
%%Trailer
%%EOF
